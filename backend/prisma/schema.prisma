generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  password      String?
  displayName   String?
  bio           String?
  avatar        String?
  provider      String         @default("email")
  providerId    String?
  isVerified    Boolean        @default(false)
  refreshToken  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  favoriteGenre String?
  location      String?
  website       String?
  comments      Comment[]
  followers     Follow[]       @relation("Following")
  following     Follow[]       @relation("Followers")
  likes         Like[]
  reviews       Review[]
  reviewReports ReviewReport[]
  watchlists    Watchlist[]

  @@index([email])
  @@index([username])
}

model Review {
  id          String         @id @default(uuid())
  userId      String
  movieId     Int
  rating      Float
  title       String?
  content     String
  hasSpoilers Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  comments    Comment[]
  likes       Like[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports     ReviewReport[]

  @@unique([userId, movieId])
  @@index([movieId])
  @@index([userId])
  @@index([createdAt])
}

model ReviewReport {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  reason    String
  details   String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@index([reviewId])
  @@index([status])
}

model Watchlist {
  id          String           @id @default(uuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  movies      WatchlistMovie[]

  @@index([userId])
  @@index([isPublic])
}

model WatchlistMovie {
  id          String    @id @default(uuid())
  watchlistId String
  movieId     Int
  order       Int       @default(0)
  addedAt     DateTime  @default(now())
  notes       String?
  watched     Boolean   @default(false)
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, movieId])
  @@index([watchlistId])
  @@index([movieId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model Comment {
  id        String    @id @default(uuid())
  userId    String
  reviewId  String
  content   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  review    Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([userId])
  @@index([parentId])
}
