generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(uuid())
  email                   String         @unique
  username                String         @unique
  password                String?
  displayName             String?
  bio                     String?
  avatar                  String?
  provider                String         @default("email")
  providerId              String?
  isVerified              Boolean        @default(false)
  refreshToken            String?
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  favoriteGenre           String?
  location                String?
  website                 String?
  comments                Comment[]
  followers               Follow[]       @relation("Following")
  following               Follow[]       @relation("Followers")
  likes                   Like[]
  reviews                 Review[]
  reviewReports           ReviewReport[]
  watchlists              Watchlist[]
  notificationsReceived   Notification[] @relation("NotificationReceiver")
  notificationsTriggered  Notification[] @relation("NotificationActor")
  messagesSent            Message[]      @relation("MessagesSent")

  @@index([email])
  @@index([username])
}

model Review {
  id          String         @id @default(uuid())
  userId      String
  movieId     Int
  rating      Float
  title       String?
  content     String
  hasSpoilers Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  comments    Comment[]
  likes       Like[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports     ReviewReport[]

  @@unique([userId, movieId])
  @@index([movieId])
  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@index([userId, createdAt])
}

model ReviewReport {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  reason    String
  details   String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@index([reviewId])
  @@index([status])
}

model Watchlist {
  id          String           @id @default(uuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  movies      WatchlistMovie[]

  @@index([userId])
  @@index([isPublic])
}

model WatchlistMovie {
  id          String    @id @default(uuid())
  watchlistId String
  movieId     Int
  order       Int       @default(0)
  addedAt     DateTime  @default(now())
  notes       String?
  watched     Boolean   @default(false)
  watchlist   Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, movieId])
  @@index([watchlistId])
  @@index([movieId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([followingId, createdAt])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model Comment {
  id        String    @id @default(uuid())
  userId    String
  reviewId  String
  content   String
  parentId  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  review    Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([userId])
  @@index([parentId])
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  type        String   // like, comment, follow, mention
  actorId     String
  referenceId String?  // ID of the liked review, comment, etc.
  message     String
  link        String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)
  actor       User     @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([actorId])
  @@index([createdAt])
  @@index([read])
  @@index([userId, read])
}

model Conversation {
  id            String    @id @default(uuid())
  participants  String[]  // Array of user IDs
  lastMessage   String?
  lastMessageAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]

  @@index([participants])
  @@index([lastMessageAt])
}

model Message {
  id             String       @id @default(uuid())
  conversationId String
  senderId       String
  content        String       @db.Text
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}