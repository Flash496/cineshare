// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  password      String?   // Null for OAuth users
  displayName   String?
  bio           String?   @db.Text
  avatar        String?
  location      String?
  website       String?
  favoriteGenre String?
  provider      String    @default("email") // email, google, facebook
  providerId    String?   // Google user ID
  isVerified    Boolean   @default(false)
  refreshToken  String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  reviews       Review[]
  watchlists    Watchlist[]
  followers     Follow[]        @relation("Following")
  following     Follow[]        @relation("Followers")
  likes         Like[]
  comments      Comment[]
  reviewReports ReviewReport[]

  @@index([email])
  @@index([username])
}

model Review {
  id          String   @id @default(uuid())
  userId      String
  movieId     Int
  rating      Float
  title       String?
  content     String   @db.Text
  hasSpoilers Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]
  reports  ReviewReport[]

  @@unique([userId, movieId])
  @@index([movieId])
  @@index([userId])
  @@index([createdAt])
}

model ReviewReport {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  reason    String   // spam, offensive, spoilers, other
  details   String?  @db.Text
  status    String   @default("pending") // pending, reviewed, dismissed
  createdAt DateTime @default(now())

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@index([reviewId])
  @@index([status])
}

model Watchlist {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  movies WatchlistMovie[]

  @@index([userId])
  @@index([isPublic])
}

model WatchlistMovie {
  id          String   @id @default(uuid())
  watchlistId String
  movieId     Int
  order       Int      @default(0)
  notes       String?  @db.Text
  watched     Boolean  @default(false)
  addedAt     DateTime @default(now())

  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, movieId])
  @@index([watchlistId])
  @@index([movieId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@index([userId])
  @@index([reviewId])
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  reviewId  String
  content   String   @db.Text
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  review  Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")

  @@index([reviewId])
  @@index([userId])
  @@index([parentId])
}